BveTs Map 2.02:utf-8

include '[[NOMPI]] このマップでは AtsEX マッププラグインを使用しています。正常動作には車両に AtsEX を搭載する必要があります。詳細は https://automatic9045.github.io をご覧ください。';
include '[[NOMPI]] ;This map requires an AtsEX powered vehicle to execute map plugins. For more information, visit https://automatic9045.github.io';

include '<MPIUSING>MapPluginUsing.xml';

Structure.Load('Structures.csv');
Station.Load('Stations.csv');

Curve.SetGauge(1.067);
Curve.SetCenter(1.067 / 2);

Track['1'].Cant.SetGauge(1.067);
Track['1'].Cant.SetCenter(1.067 / 2);
Track['1'].X.Interpolate(-3.8);

-100;
	Background.Change('Bg1');

	Repeater['Gnd'].Begin('0', 0, -1, 0, 0, 0, 0, 0, 0, 25, 'Ground1a', 'Ground1b', 'Ground1c', 'Ground1d', 'Ground1e' );

	Repeater['Track0'].Begin0('0', 3, 5, 5, 'Ballast0', 'Ballast1', 'Ballast2', 'Ballast3', 'Ballast4');
	Repeater['Track0RailL'].Begin('0', -0.5335, 0, 0, 0, 0, 0, 3, 5, 5, 'RailL0', 'RailL1', 'RailL2', 'RailL3', 'RailL4');
	Repeater['Track0RailR'].Begin('0', 0.5335, 0, 0, 0, 0, 0, 3, 5, 5, 'RailR0', 'RailR1', 'RailR2', 'RailR3', 'RailR4');

	Repeater['Track1'].Begin0('1', 3, 5, 5, 'Ballast0', 'Ballast1', 'Ballast2', 'Ballast3', 'Ballast4');
	Repeater['Track1RailL'].Begin('1', -0.5335, 0, 0, 0, 0, 0, 3, 5, 5, 'RailL0', 'RailL1', 'RailL2', 'RailL3', 'RailL4');
	Repeater['Track1RailR'].Begin('1', 0.5335, 0, 0, 0, 0, 0, 3, 5, 5, 'RailR0', 'RailR1', 'RailR2', 'RailR3', 'RailR4');
	
	Repeater['Form0R'].Begin0('0', 1, 5, 5, 'FormR');
	Repeater['Form0CR'].Begin0('0', 1, 5, 5, 'FormCR');
	Repeater['Form0WallR'].Begin0('0', 1, 5, 5, 'FormWallR');
	
0;
	Station['1-1'].Put(-1, -5, 5);
	structure['Stop6'].Put('0', -2, 0, 0, 0, 0, 0, 0, 0);
	
	Train['test'].Load('TestTrain.txt', '1', '1');

15;
	structure['Info'].Put('1', -1, 4, 0, 0, -10, 0, 0, 0);

	Repeater['Form0R'].End();
	Repeater['Form0CR'].End();
	Repeater['Form0WallR'].End();

50;
	Station['ExtendedBeacon1'].Put(-1, 0.1, 0);

	// 拡張地上子の通過検知直後に実行するスクリプト。
	// このスクリプトは地上子（ExtendedBeaconBase<TPassedEventArgs>）の Passed イベントが発生するより前に実行されます。
	// BVE の仕様上、全て小文字に変換されるので注意してください。
	// また、ダブルクォーテーションは空白に置き換えられてしまうので ` で代用します（AtsEX によって " に置き換えられます）。
	$script = '#load `ExtendedBeaconTest_CSharpScript.csx`';

	Repeater[$script].Begin0('0', 0, 0, 0, // スクリプトはリピーターキーに指定します。また、連続ストラクチャーの設置先軌道は地上子の設置先軌道としてそのまま使用されます。
		'AtsEx.ExtendedBeacon', // 拡張地上子であることを表す文字列。
		'BeaconName.1', // 拡張地上子の任意の名前。この名前はプラグインから地上子を参照する（BveHacker クラスの ExtendedBeacons プロパティから）際に使用します。省略する場合は AtsEx.Null を指定します。
		'AtsEx.ScriptLanguage.CSharpScript', // スクリプトの記述言語を指定する文字列。
		'AtsEx.ExtendedBeacon.ObservingTargetTrack.AllTracks', // 拡張地上子の検知対象の軌道を指定する文字列。
		'AtsEx.ExtendedBeacon.ObservingTargetTrain.Trains'); // 拡張地上子の検知対象の列車を指定する文字列。複数指定可能です。

100;
	Station['ExtendedBeacon2'].Put(-1, 0.1, 0);

	// IronPython2 で開発した例。
	$LineBreak = '\n';
	$script = 'import extended_beacon_test_ipy2 as test' + $LineBreak +
		'test.tick(g)';

	Repeater[$script].Begin0('0', 0, 0, 0,
		'AtsEx.ExtendedBeacon',
		'BeaconName.2',
		'AtsEx.ScriptLanguage.IronPython2',
		'AtsEx.ExtendedBeacon.ObservingTargetTrack.AllTracks',
		'AtsEx.ExtendedBeacon.ObservingTargetTrain.Myself', 'AtsEx.ExtendedBeacon.ObservingTargetTrain.Trains'); // 複数指定した例。

200;
	Station['ExtendedBeacon3'].Put(-1, 0.1, 0);

	$script = '#load `ExtendedBeaconTest_CSharpScript.csx`';
	Repeater[$script].Begin0('0', 0, 0, 0,
		'AtsEx.ExtendedBeacon',
		'AtsEx.Null',
		'AtsEx.ScriptLanguage.CSharpScript',
		'AtsEx.ExtendedBeacon.ObservingTargetTrack.SpecifiedTrackOnly', // 地上子の設置先軌道（= '0'）のみを検知対象とした例。
		'AtsEx.ExtendedBeacon.ObservingTargetTrain.Trains');

1365;
	Repeater['Form0R'].Begin0('0', 1, 5, 5, 'FormR');
	Repeater['Form0CR'].Begin0('0', 1, 5, 5, 'FormCR');
	Repeater['Form0WallR'].Begin0('0', 1, 5, 5, 'FormWallR');

1500;
	Station['1-2'].Put(-1, -5, 5);
	structure['Stop6'].Put('0', -2, 0, 0, 0, 0, 0, 0, 0);
	
1515;
	Repeater['Form0R'].End();
	Repeater['Form0CR'].End();
	Repeater['Form0WallR'].End();

1550;
	Station['WindStart'].Put(-1, 0, 0);

1650;
	Station['WindEnd'].Put(-1, 0, 0);
	
2865;
	Repeater['Form0R'].Begin0('0', 1, 5, 5, 'FormR');
	Repeater['Form0CR'].Begin0('0', 1, 5, 5, 'FormCR');
	Repeater['Form0WallR'].Begin0('0', 1, 5, 5, 'FormWallR');

3000;
	Station['1-3'].Put(-1, -5, 5);
	structure['Stop6'].Put('0', -2, 0, 0, 0, 0, 0, 0, 0);
	
3015;
	Repeater['Form0R'].End();
	Repeater['Form0CR'].End();
	Repeater['Form0WallR'].End();
	
4365;
	Repeater['Form0R'].Begin0('0', 1, 5, 5, 'FormR');
	Repeater['Form0CR'].Begin0('0', 1, 5, 5, 'FormCR');
	Repeater['Form0WallR'].Begin0('0', 1, 5, 5, 'FormWallR');

4500;
	Station['1-4'].Put(-1, -5, 5);
	structure['Stop6'].Put('0', -2, 0, 0, 0, 0, 0, 0, 0);
	
4515;
	Repeater['Form0R'].End();
	Repeater['Form0CR'].End();
	Repeater['Form0WallR'].End();
	
5865;
	Repeater['Form0R'].Begin0('0', 1, 5, 5, 'FormR');
	Repeater['Form0CR'].Begin0('0', 1, 5, 5, 'FormCR');
	Repeater['Form0WallR'].Begin0('0', 1, 5, 5, 'FormWallR');

6000;
	Station['1-5'].Put(-1, -5, 5);
	structure['Stop6'].Put('0', -2, 0, 0, 0, 0, 0, 0, 0);
	
6015;
	Repeater['Form0R'].End();
	Repeater['Form0CR'].End();
	Repeater['Form0WallR'].End();
	
7365;
	Repeater['Form0R'].Begin0('0', 1, 5, 5, 'FormR');
	Repeater['Form0CR'].Begin0('0', 1, 5, 5, 'FormCR');
	Repeater['Form0WallR'].Begin0('0', 1, 5, 5, 'FormWallR');

7500;
	Station['1-6'].Put(-1, -5, 5);
	structure['Stop6'].Put('0', -2, 0, 0, 0, 0, 0, 0, 0);
	
7515;
	Repeater['Form0R'].End();
	Repeater['Form0CR'].End();
	Repeater['Form0WallR'].End();